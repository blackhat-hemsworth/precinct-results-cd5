---
title: "CD5 Precinct Level Results"
format: 
  html:
      embed-resources: true
      grid: 
        body-width: 2000px
        sidebar-width: 200px
        margin-width: 200px
      toc: true
  pdf: 
      toc: true

editor: visual
execute:
  echo: false
---

```{python}
#| code-summary: "Setting python global variables"

import pandas as pd
import requests
import bs4 
from io import StringIO

# global variables -- change for future
# v1 of this does manually remove the hotly contested CD5 republican race
# could be configured in some way here in the future 
# html visually distinguishes republican v democrat
# but pandas read_html creates a weird MultiIndex

ers_election_id = 169
relevant_candidate = "Ilhan Omar"
```

```{r}
#| include: false
#| code-summary: "importing data, saving csv to pass to python"

knitr::opts_chunk$set(dev = "png",
                      dpi = 600,
                      fig.width=10)

#options(tigris_use_cache = TRUE)
#library(tigris)
library(tidyverse)
library(janitor)
library(sf)
library(osmdata)
library(stringr)
library(fuzzyjoin)
library(plotly)

# get City Ward map - from https://gisdata.mn.gov/dataset/bdry-votingdistricts
tc <-  read_sf(dsn = "shp_bdry_votingdistricts", layer = "bdry_votingdistricts")
cd5 <- tc |> filter(CONGDIST == 5) 

cd5 |> st_drop_geometry() |> write.csv("cd5-precincts.csv")
```

```{python}
#| code-summary: "getting all of the URL precinct values from multiselect for relevant counties"

cd5_pd = pd.read_csv("cd5-precincts.csv")

precinct_ids = []

for c in cd5_pd.COUNTYCODE.unique():
  url = f'https://electionresults.sos.mn.gov/Select/Precinct/Index?ErsElectionId={ers_election_id}&Id=county&CountyId={c}&show=Go'

  html = requests.get(url)
  bs_obj = bs4.BeautifulSoup(html.text)
  for i in bs_obj.findAll("option"):
    precinct_ids.append([c,i["value"],i.get_text()])

precinct_id_df = pd.DataFrame(precinct_ids, columns = ['county','id', 'precinct']) 
```

```{python}
#| code-summary: "getting all tables mentioning candidate from the relevant precincts"

list_of_dfs = list()

for index, row in precinct_id_df.iterrows():
  c,p=row["county"],row["id"]
  url = f'https://electionresults.sos.mn.gov/results/Index?ErsElectionId={ers_election_id}&CountyId={c}&DistrictId=&Scenario=Precincts&selectprecincts={p}&show=Show+Selected+Precincts'
  print(url)
  html = requests.get(url)
  bs_obj = bs4.BeautifulSoup(html.text)
  tables = bs_obj.findAll('table') 
  for table in tables:
      df = pd.read_html(StringIO(str(table)), displayed_only=False)
      if len(df) != 0 and ('Republican', 'Democratic-Farmer-Labor') in df[0].columns:
        df0 = df[0]

        # get rid of Senate / other races
        if relevant_candidate in df0.Candidate.values: 
          df0.columns = df0.columns.droplevel(0)
          # get rid of republican (should be better way?)
          df0 = df0[df0.Candidate != "Dalia Al-Aqidi"]
          
          df0["Precinct"] = row["precinct"]
          list_of_dfs.append(df0) 
  
main_df = pd.concat(list_of_dfs)

main_df.to_csv("election-results.csv")
```

```{r}
#| code-summary: "cleaning up Sec. of State's messy precinct names & joining results back into df with geometry"

results = read.csv("election-results.csv")

results <- results |> mutate(Precinct_calc = Precinct |> str_replace_all("-0","-"))
cd5 <- cd5 |> 
  mutate(Precinct_calc = paste0(COUNTYNAME, ": ", toupper(PCTNAME), " ") |> 
                         str_replace_all("SAINT","ST") |>
                         str_replace_all("Ramsey: ST. ANTHONY",
                                         "Ramsey: ST ANTHONY"),
         Precinct_calc = case_when(
           grepl("ROBBINSDALE",Precinct_calc) ~ str_sub(Precinct_calc,end=-5),
           TRUE ~ Precinct_calc)
         )


results_sf <- results |> select(-X) |>
                         mutate(Percent = str_sub(Percent,end=-2) |> 
                                          as.numeric())|>
                         left_join(cd5, by = c("Precinct_calc"="Precinct_calc")) |>
                         pivot_wider(names_from = Candidate, values_from = c(Totals,Percent)) |>
                         clean_names()

```

```{r}
#| code-summary: "making a map"

G <- results_sf  |> ggplot(aes(fill = percent_ilhan_omar, geometry = geometry, 
                               text = paste0(percent_ilhan_omar,"% - ",precinct_calc))) +
                    geom_sf() + 
                    scale_fill_gradient(low = "#E1BE6A",
                                        high= "#40B0A6",
                                        limits=c(0,100)) + 
                    theme_void()

ggsave("ilhan-map.png", bg = "white")
```

```{r}
#| code-summary: "making it interactive"

p <- ggplotly(G , tooltip = "text", width =1200, height=600) |>
     style(hoveron = "fills", textposition="right") 

htmlwidgets::saveWidget(as_widget(p), "ilhan-map.html")
```

```{r}
#| include: false


results_sf |> group_by(mnsendist) |> 
              summarise(t_samuels = sum(totals_don_samuels),
                        t_ilhan = sum(totals_ilhan_omar),
                        total =sum(totals_don_samuels, totals_ilhan_omar,
                                   totals_nate_schluter, totals_abena_a_mc_kenzie),
                        pct_ilhan = t_ilhan / total,
                        pct_samuels = t_samuels / total
                        ) |> 
              arrange(pct_ilhan)
```
